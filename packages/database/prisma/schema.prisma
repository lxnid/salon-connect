// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  SALON_OWNER
  STYLIST
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum ServiceCategory {
  HAIRCUT
  COLORING
  STYLING
  TREATMENT
  MANICURE
  PEDICURE
  FACIAL
  MASSAGE
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      UserRole
  firstName String?
  lastName  String?
  phone     String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  customerBookings  Booking[] @relation("CustomerBookings")
  customerReviews   Review[]  @relation("CustomerReviews")
  customerFavorites Favorite[]
  ownedSalons       Salon[]   @relation("SalonOwner")
  stylistProfile    Stylist?

  @@map("users")
}

model Salon {
  id          String  @id @default(cuid())
  name        String
  description String?
  address     String
  city        String
  state       String
  zipCode     String
  latitude    Float?
  longitude   Float?
  phone       String?
  email       String?
  website     String?
  instagram   String?
  images      String[] // Array of image URLs
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownerId   String
  owner     User        @relation("SalonOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  services  Service[]
  stylists  Stylist[]
  bookings  Booking[]
  reviews   Review[]
  favorites Favorite[]

  @@map("salons")
}

model Stylist {
  id           String   @id @default(cuid())
  bio          String?
  experience   Int?     // years of experience
  specialties  String[] // array of specialties
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  salonId   String
  salon     Salon   @relation(fields: [salonId], references: [id], onDelete: Cascade)
  bookings  Booking[]
  services  StylistService[]
  schedules StylistSchedule[]

  @@map("stylists")
}

model Service {
  id          String          @id @default(cuid())
  name        String
  description String?
  category    ServiceCategory
  duration    Int             // duration in minutes
  price       Float           // price in dollars
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  salonId         String
  salon           Salon            @relation(fields: [salonId], references: [id], onDelete: Cascade)
  bookingServices BookingService[]
  stylistServices StylistService[]

  @@map("services")
}

model StylistService {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  stylistId String
  stylist   Stylist @relation(fields: [stylistId], references: [id], onDelete: Cascade)
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([stylistId, serviceId])
  @@map("stylist_services")
}

model StylistSchedule {
  id            String   @id @default(cuid())
  dayOfWeek     Int      // 0 = Sunday, 1 = Monday, etc.
  startTime     String   // HH:MM format
  endTime       String   // HH:MM format
  isAvailable   Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  stylistId String
  stylist   Stylist @relation(fields: [stylistId], references: [id], onDelete: Cascade)

  @@map("stylist_schedules")
}

model Booking {
  id           String        @id @default(cuid())
  datetime     DateTime
  totalPrice   Float
  status       BookingStatus @default(PENDING)
  notes        String?       // special requests
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  customerId      String
  customer        User             @relation("CustomerBookings", fields: [customerId], references: [id], onDelete: Cascade)
  salonId         String
  salon           Salon            @relation(fields: [salonId], references: [id], onDelete: Cascade)
  stylistId       String
  stylist         Stylist          @relation(fields: [stylistId], references: [id], onDelete: Cascade)
  bookingServices BookingService[]
  review          Review?

  @@map("bookings")
}

model BookingService {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([bookingId, serviceId])
  @@map("booking_services")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  customerId String
  customer   User    @relation("CustomerReviews", fields: [customerId], references: [id], onDelete: Cascade)
  salonId    String
  salon      Salon   @relation(fields: [salonId], references: [id], onDelete: Cascade)
  bookingId  String  @unique
  booking    Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  customerId String
  customer   User   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  salonId    String
  salon      Salon  @relation(fields: [salonId], references: [id], onDelete: Cascade)

  @@unique([customerId, salonId])
  @@map("favorites")
}